[
  {
    "url": "https://dev.algorand.co/getting-started/introduction/",
    "content": "Welcome to the new Algorand Developer Portal 👋 Whether you have been waiting for this or are surprised by it, please have a look around. We think you’re going to enjoy reading—or chatting with—these docs. In reimagining the Algorand Developer Portal, we set out to address challenges from the past, cater to what developers expect today, and plan for how technical documentation will be used in the future. Our work has been guided by a set of key principles: One-stop shop:The portal should consolidate all of the resources developers need to build with Algorand technologies. If something cannot be found, it may as well not exist. Therefore, the portal should colocate documentation and examples for all of our tools, libraries, and languages under a single site. In some cases, content is directly imported from external repositories; in other cases, we aim to include links to a rich array of external resources, from community-maintained SDKs to third-party learning materials. Correct and current:The content of the documentation needs to accurately reflect the current state of the art of Algorand code and tools. The old portal did not always include the latest libraries, abstractions, and paths-of-least-resistance that are available. Also, this site no longer showcases examples using old or deprecated languages and libraries. Rather, you will learn how to apply various concepts using the latest versions of AlgoKit libraries, which we believe to be the happiest path for developers to follow. Diátaxisframework:These docs have been designed loosely following the Diátaxis approach to technical documentation, which conceptualizes content along the axes of action vs. cognition and acquisition vs. application. The four quadrants which emerge from a plot of these axes are: First-class AI support:Artificial intelligence tools such as Large Language Models (LLMs) have recently and swiftly revolutionized how many software developers work. This site embraces AI workflows in two key ways: How to Use This Portal The portal is organized into the following sections: Want to get your hands on Algorand code as quickly as possible? This section is for you. Install AlgoKit and deploy your first smart contract, follow a guided code tutorial in your browser, or browse a gallery of examples to see what Algorand apps look like in practice, all in just minutes. Developing software for blockchain requires understanding and applying a different programming paradigm than one might be accustomed to in other types of systems. Use this section as a way to build your mental model of Algorand and how the distributed ledger’s accounts, transactions, assets, smart contracts, and the consensus protocol work, both on their own and as a complex, composable system. Throughout this section, you will find concrete examples of how to apply these concepts in practice using the most current libraries, languages, and tools. AlgoKit is a collection of developer tools to make it easy to build, test, and deploy applications on Algorand, and this section contains the user manuals for the tools in the kit. This section documents each of these tools, from the CLI to Lora to the smart contract languages and other code libraries. Discover how to set up an Algorand node of various types in this section. Follow the NodeKit Quick Start to use Algorand Foundations’ terminal user interface to install and manage your node. You can also find documentation on Indexer and Conduit, node management practices, and how to configure the node software in various ways. This section of the site imports API reference documentation for a number of tools, languages, libraries, and more. Additionally, the ARC Standards section contains information about our Algorand Request for Comments (ARC) standards that guide the developer ecosystem to apply Algorand technical capabilities in consistent and interoperable ways. If you’re reading this portal, then the portal is for you. Whether you are actively building applications on Algorand, performing formal research, or just following your curiosity, we appreciate your feedback. All our docs are open source under the Algorand Foundation organization on GitHub, and you are welcome to submit documentation feedback, bug reports, or other issues using the GitHub Issues templateshere. This site is built using theStarlightdocumentation theme forAstro, an industry-leading static site generation framework. The integrated AI bot is provided bykapa.ai."
  },
  {
    "url": "https://dev.algorand.co/getting-started/introduction/#_top",
    "content": "Welcome to the new Algorand Developer Portal 👋 Whether you have been waiting for this or are surprised by it, please have a look around. We think you’re going to enjoy reading—or chatting with—these docs. In reimagining the Algorand Developer Portal, we set out to address challenges from the past, cater to what developers expect today, and plan for how technical documentation will be used in the future. Our work has been guided by a set of key principles: One-stop shop:The portal should consolidate all of the resources developers need to build with Algorand technologies. If something cannot be found, it may as well not exist. Therefore, the portal should colocate documentation and examples for all of our tools, libraries, and languages under a single site. In some cases, content is directly imported from external repositories; in other cases, we aim to include links to a rich array of external resources, from community-maintained SDKs to third-party learning materials. Correct and current:The content of the documentation needs to accurately reflect the current state of the art of Algorand code and tools. The old portal did not always include the latest libraries, abstractions, and paths-of-least-resistance that are available. Also, this site no longer showcases examples using old or deprecated languages and libraries. Rather, you will learn how to apply various concepts using the latest versions of AlgoKit libraries, which we believe to be the happiest path for developers to follow. Diátaxisframework:These docs have been designed loosely following the Diátaxis approach to technical documentation, which conceptualizes content along the axes of action vs. cognition and acquisition vs. application. The four quadrants which emerge from a plot of these axes are: First-class AI support:Artificial intelligence tools such as Large Language Models (LLMs) have recently and swiftly revolutionized how many software developers work. This site embraces AI workflows in two key ways: How to Use This Portal The portal is organized into the following sections: Want to get your hands on Algorand code as quickly as possible? This section is for you. Install AlgoKit and deploy your first smart contract, follow a guided code tutorial in your browser, or browse a gallery of examples to see what Algorand apps look like in practice, all in just minutes. Developing software for blockchain requires understanding and applying a different programming paradigm than one might be accustomed to in other types of systems. Use this section as a way to build your mental model of Algorand and how the distributed ledger’s accounts, transactions, assets, smart contracts, and the consensus protocol work, both on their own and as a complex, composable system. Throughout this section, you will find concrete examples of how to apply these concepts in practice using the most current libraries, languages, and tools. AlgoKit is a collection of developer tools to make it easy to build, test, and deploy applications on Algorand, and this section contains the user manuals for the tools in the kit. This section documents each of these tools, from the CLI to Lora to the smart contract languages and other code libraries. Discover how to set up an Algorand node of various types in this section. Follow the NodeKit Quick Start to use Algorand Foundations’ terminal user interface to install and manage your node. You can also find documentation on Indexer and Conduit, node management practices, and how to configure the node software in various ways. This section of the site imports API reference documentation for a number of tools, languages, libraries, and more. Additionally, the ARC Standards section contains information about our Algorand Request for Comments (ARC) standards that guide the developer ecosystem to apply Algorand technical capabilities in consistent and interoperable ways. If you’re reading this portal, then the portal is for you. Whether you are actively building applications on Algorand, performing formal research, or just following your curiosity, we appreciate your feedback. All our docs are open source under the Algorand Foundation organization on GitHub, and you are welcome to submit documentation feedback, bug reports, or other issues using the GitHub Issues templateshere. This site is built using theStarlightdocumentation theme forAstro, an industry-leading static site generation framework. The integrated AI bot is provided bykapa.ai."
  },
  {
    "url": "https://dev.algorand.co/",
    "content": "Unleash the power of Algorand Find everything you need to build applications powered by the Algorand blockchain in this developer portal. Become an Algorand Developer Follow our quick start guide to install Algorand’s developer toolkit and go from zero to deploying your \"Hello, world\" smart contract in mere minutes using TypeScript or Python pathways. AlgoKit code tutorials Step-by-step introduction to Algorand through Utils TypeScript. Explore and launch batteries-included example apps. Meet other devs and get code support from the community. Contact the Foundation Reach out to the team directly with technical inquiries. Join the Algorand network with a validator node using accessible commodity hardware in a matter of minutes. Experience how easy it is to become a node-runner so you can participate in staking rewards, validate blocks, submit transactions, and read chain data."
  },
  {
    "url": "https://dev.algorand.co/#_top",
    "content": "Unleash the power of Algorand Find everything you need to build applications powered by the Algorand blockchain in this developer portal. Become an Algorand Developer Follow our quick start guide to install Algorand’s developer toolkit and go from zero to deploying your \"Hello, world\" smart contract in mere minutes using TypeScript or Python pathways. AlgoKit code tutorials Step-by-step introduction to Algorand through Utils TypeScript. Explore and launch batteries-included example apps. Meet other devs and get code support from the community. Contact the Foundation Reach out to the team directly with technical inquiries. Join the Algorand network with a validator node using accessible commodity hardware in a matter of minutes. Experience how easy it is to become a node-runner so you can participate in staking rewards, validate blocks, submit transactions, and read chain data."
  },
  {
    "url": "https://dev.algorand.co/getting-started/introduction",
    "content": "Welcome to the new Algorand Developer Portal 👋 Whether you have been waiting for this or are surprised by it, please have a look around. We think you’re going to enjoy reading—or chatting with—these docs. In reimagining the Algorand Developer Portal, we set out to address challenges from the past, cater to what developers expect today, and plan for how technical documentation will be used in the future. Our work has been guided by a set of key principles: One-stop shop:The portal should consolidate all of the resources developers need to build with Algorand technologies. If something cannot be found, it may as well not exist. Therefore, the portal should colocate documentation and examples for all of our tools, libraries, and languages under a single site. In some cases, content is directly imported from external repositories; in other cases, we aim to include links to a rich array of external resources, from community-maintained SDKs to third-party learning materials. Correct and current:The content of the documentation needs to accurately reflect the current state of the art of Algorand code and tools. The old portal did not always include the latest libraries, abstractions, and paths-of-least-resistance that are available. Also, this site no longer showcases examples using old or deprecated languages and libraries. Rather, you will learn how to apply various concepts using the latest versions of AlgoKit libraries, which we believe to be the happiest path for developers to follow. Diátaxisframework:These docs have been designed loosely following the Diátaxis approach to technical documentation, which conceptualizes content along the axes of action vs. cognition and acquisition vs. application. The four quadrants which emerge from a plot of these axes are: First-class AI support:Artificial intelligence tools such as Large Language Models (LLMs) have recently and swiftly revolutionized how many software developers work. This site embraces AI workflows in two key ways: How to Use This Portal The portal is organized into the following sections: Want to get your hands on Algorand code as quickly as possible? This section is for you. Install AlgoKit and deploy your first smart contract, follow a guided code tutorial in your browser, or browse a gallery of examples to see what Algorand apps look like in practice, all in just minutes. Developing software for blockchain requires understanding and applying a different programming paradigm than one might be accustomed to in other types of systems. Use this section as a way to build your mental model of Algorand and how the distributed ledger’s accounts, transactions, assets, smart contracts, and the consensus protocol work, both on their own and as a complex, composable system. Throughout this section, you will find concrete examples of how to apply these concepts in practice using the most current libraries, languages, and tools. AlgoKit is a collection of developer tools to make it easy to build, test, and deploy applications on Algorand, and this section contains the user manuals for the tools in the kit. This section documents each of these tools, from the CLI to Lora to the smart contract languages and other code libraries. Discover how to set up an Algorand node of various types in this section. Follow the NodeKit Quick Start to use Algorand Foundations’ terminal user interface to install and manage your node. You can also find documentation on Indexer and Conduit, node management practices, and how to configure the node software in various ways. This section of the site imports API reference documentation for a number of tools, languages, libraries, and more. Additionally, the ARC Standards section contains information about our Algorand Request for Comments (ARC) standards that guide the developer ecosystem to apply Algorand technical capabilities in consistent and interoperable ways. If you’re reading this portal, then the portal is for you. Whether you are actively building applications on Algorand, performing formal research, or just following your curiosity, we appreciate your feedback. All our docs are open source under the Algorand Foundation organization on GitHub, and you are welcome to submit documentation feedback, bug reports, or other issues using the GitHub Issues templateshere. This site is built using theStarlightdocumentation theme forAstro, an industry-leading static site generation framework. The integrated AI bot is provided bykapa.ai."
  },
  {
    "url": "https://dev.algorand.co/getting-started/algokit-quick-start",
    "content": "Getting Started with AlgoKit Hello, Developer! Welcome to Algorand! This quick start guide will help you set up your development environment, create your first Algorand project with AlgoKit, and deploy your first Algorand smart contract. By the end of this guide, you’ll be ready to build your own decentralized application on the Algorand blockchain. But first, what is AlgoKit? AlgoKit is a simple, one-stop tool for developers to quickly and easily build and launch secure, automated, production-ready decentralized applications on the Algorand protocol — now also featuring native support for Python! This empowers developers to write Algorand apps in regular Python, one of the world’s most popular programming languages. In addition, AlgoKit features: Learn more about AlgoKit Here: Before you install AlgoKit, you need to install the following prerequisites: To install AlgoKit, run the following command from a terminal. If you used AlgoKit before, update it with pipx: After the installation completes,restart the terminal. Ensure prerequisites are installed Install Python3 using WinGet Restart the terminal to ensure Python and pip are available on the path Restart the terminal to ensure pipx is available on the path Install AlgoKit via pipx: If you used AlgoKit before, update it with pipx: Restart the terminal to ensure AlgoKit is available on the path Ensure prerequisites are installed Install using Homebrew Restart the terminal to ensure AlgoKit is available on the path Ensure prerequisites are installed Install AlgoKit, withpipxby running the following command from a terminal. If you used AlgoKit before, update it with pipx: After the installation completes,restart the terminal. Verify the Installation To verify AlgoKit Installed correctly run the following command: Output similar to the following should be displayed: When building smart contracts, it is recommended to build and test on a local Algorand blockchain running on your computer first. Deploying and calling smart contracts on mainnet (the live public blockchain for production) costs real money. Deploying on testnet (a replica of mainnet for testing) can be cumbersome. Therefore, it is recommended to first test on the local blockchain. Once everything works, move to testnet for final testing, and then deploy to mainnet to launch your application. AlgoKit supports using alocal version of the Algorand blockchain. To start an instance of this LocalNet first openDocker Desktopon your computer and then run the following command from the terminal: This should start an instance of the LocalNet within docker. If you open the Docker Desktop application you should something similar to the following: Create an AlgoKit project Now, let’s create an Algorand project with AlgoKit. We will refer to these projects as “AlgoKit projects.” AlgoKit provides a series of templates for you to use depending on the type of project you want to create. This guide will walk you through using either theTypeScriptorPythonsmart contract starter template. Choose the language that you are most comfortable with. For this guide, we will use the TypeScript smart contract starter template. To create a new AlgoKit project you can easily do so by running: This will launch a guided menu system to create a specific project tailored to your needs. You will first be prompted to select the type of project you want to create. For this quick start guide, we will use the TypeScript smart contract template, so select theSmart Contractsoption. Next, AlgoKit will ask you what programming language you want to use for the smart contract. With AlgoKit 3.0, you can now write Algorand smart contracts with native TypeScript. Let’s selectTypeScriptas our smart contract language by pressing enter. Then AlgoKit will ask you for the name of the project. Let’s name ithello-algorand, but if you want to name it differently, feel free to do so! After writing the name, press enter to continue. Next you can set the name of the smart contract. We will keep it as it is for now. Next, you can select the template preset. TheStarterpreset is for quickly implementing and testing certain features whereas theProductionpreset is for production-ready applications. For this guide, let’s selectStarter. Next, AlgoKit will ask you if you want to run thealgokit project bootstrapcommand to install the necessary dependencies. Say yes by pressing “y” This process can take a few minutes. Finally, AlgoKit will ask you if you want to initialize a git repository. Let’s say yes by pressing “y” so that we can easily push our AlgoKit project to Github. Once finished, VS Code should automatically be opened with the initialized project if VS Code is set as your default editor. If not,cdinto the project directory and open the project in your IDE of choice. This starter app contains one smart contract written inAlgorand TypeScriptnamedHelloWorldin thesmart_contracts/hello_world/contract.algo.tsfile. The contract has a method calledhellothat takes in aStringand returns aString. For this guide, we will use the Python smart contract starter template. To create a new AlgoKit project you can easily do so by running: This will launch a guided menu system to create a specific project tailored to your needs. You will first be prompted to select the type of project you want to create. For this quick start guide, we will use the Python smart contract template, so select theSmart Contractsoption. Next, AlgoKit will ask you what programming language you want to use for the smart contract. With AlgoKit 2.0, you can now write Algorand smart contracts with native Python. Let’s selectPythonas our smart contract language by pressing enter. Then AlgoKit will ask you for the name of the project. Let’s name ithello-algorand, but if you want to name it differently, feel free to do so! After writing the name, press enter to continue. Next you can set the name of the smart contract. We will keep it as it is for now. Next, you can select the template preset. TheStarterpreset is for quickly implementing and testing certain features whereas theProductionpreset is for production-ready applications. For this guide, let’s selectStarter. Next, AlgoKit will ask you what language you want to use for contract deployment. After writing your smart contract you need to deploy and call the contract either from your frontend or backend. Since most frontend frameworks are in Python, let’s select Python for this guide. Next, AlgoKit will ask you if you want to run thealgokit project bootstrapcommand to install the necessary dependencies. Say yes by pressing “y” This process can take a few minutes. Finally, AlgoKit will ask you if you want to initialize a git repository. Let’s say yes by pressing “y” so that we can easily push our AlgoKit project to Github. Once finished, VS Code should automatically be opened with the initialized project if VS Code is set as your default editor. If not,cdinto the project directory and open the project in your IDE of choice. This starter app contains one smart contract written inAlgorand PythonnamedHelloWorldin thesmart_contracts/hello_world/contract.pyfile. The contract has a method calledhellothat takes in aStringand returns aString. Run the Demo Application Once the starter project is created, you will notice in thesmart_contracts/hello_worldfolder a file nameddeploy_config.tswhich is a simple example of using AlgoKit to deploy theHelloWorldsmart contract incontract.algo.tson the Local Algorand blockchain started earlier and then call thehellomethod. Now there are two ways to run thedeploy-config.tsfile to deploy and call the smart contract: By hittingF5it will start LocalNet, build the smart contract, deploy and call the smart contractcontract.algo.tsby running thedeploy-config.tsfile. Alternatively, you can run the following commands from the terminal to build the contract and run thedeploy-config.tsfile: The output should look similar to the following: The App ID of of the deployed contract and its Algorand address is displayed, followed by the message returned from the smart contract call. Additionally, by building the smart contract, AlgoKit generates various artifacts in theartifactsfolder. These artifacts include: These artifacts can be used by tools likeLoraandgoalto deploy your smart contract to various Algorand networks. Once the starter project is created, you will notice in thesmart_contracts/hello_worldfolder a file nameddeploy_config.pywhich is a simple example of using AlgoKit to deploy theHelloWorldsmart contract incontract.pyon the Local Algorand blockchain started earlier and then call thehellomethod. Now there are two ways to run thedeploy-config.pyfile to deploy and call the smart contract: By hittingF5it will start LocalNet, build the smart contract, deploy and call the smart contractcontract.pyby running thedeploy-config.pyfile. Alternatively, you can run the following commands from the terminal to build the contract and run thedeploy-config.pyfile: The output should look similar to the following: The App ID of of the deployed contract is displayed, followed by the message returned from the smart contract call. Additionally, by building the smart contract, AlgoKit generates various artifacts in theartifactsfolder. These artifacts include: These artifacts can be used by tools likeLoraandgoalto deploy your smart contract to various Algorand networks. Lora is a web-based user interface that let’s you visualize accounts, transactions, assets and applications on an Algorand network and also provides ability to deploy and call smart contracts. This works for TestNet, MainNet and also LocalNet. While AlgoKit surfaces both a programming interface and a command line interface for interacting with Algorand, it also allows you to quickly open Lora so you can see what’s happening visually. Lora can be launched from AlgoKit by running the following command from the terminal. By default it will open Lora and point to LocalNet (It will be displayed asLocalNetin the upper right hand corner), but you can pass in parameters to point it to TestNet and MainNet too. This command will launch your default web browser and load the Lora web application. Create / Connect local account for testing To issue commands against the LocalNet network you need an account with ALGO in it. Lora gives you three options for connecting to a local wallet:Connect KMD,Connect MNEMONIC, andConnect Lute Connect KMD: Lora will automatically import KMD wallet. Connect MNEMONIC: You can manually input a MNEMONIC for an account you own. Connect Lute: You can create local accounts fromLuteand connect to them. In this guide, we will use the KMD wallet. SelectConnect walletlocated at top right hand side of the webpage and you will be prompted with the three wallet choices. Choose theConnect KMDoption. This will prompt you to enter the KMD password. If this is your first time building on Algorand, you do not have a KMD password so leave it blank and clickOK. This will connect the KMD account to Lora so you can use that account for signing transactions from the Lora user interface. Deploy the Hello World application To deploy your smart contract application, select theApp Labmenu and click on theCreatebutton. ClickDeploy newandSelect an ARC-32 JSON app spec fileto browse to the artifacts created in the previous section of this guide. Select theHelloWorld.arc32.jsonmanifest file. This will load the specific manifest file for the Hello World sample application. ClickNext. You can change theNameand theVersionof your app. We will keep it as it is. ClickNext. Click the() Callbutton. Then build and add the create transaction by clickingAdd. ClickDeployand sign the transaction by clickingOKin the KMD pop up to deploy the smart contract to the local Algorand network. You should now see the deployedHelloWorldcontract on theApp Labpage. Now click on theApp IDinside of theHelloWorldcard to go to theApplicationpage. Inside theABI Methodssection, you should see thehellomethod. Click on the drop down and theCallbutton. You will be prompted with a popup allowing you to enter the parameter for thehellomethod and call it. Enter a string in thevalueinput and click onAdd. You should now see the transaction you just built on theApplicationpage. ClickSendand sign the transaction with your KMD wallet to execute the transaction. You should now see theSend Resultshowing you the details about the transaction you just executed! You can also click onTransaction IDto go to theTransactionpage and see the full detail of the transaction. You have now successfully deployed and executed a smart contract method call using Lora! Congratulations and great job completing this guide! If you have followed this guide, you now have deployed a simple contract to an Algorand network and called it successfully! You are now ready to start building your own decentralized applications on the Algorand blockchain. Learn about general Algorand concepts: Learn more about AlgoKit:"
  },
  {
    "url": "https://dev.algorand.co/nodes/overview/",
    "content": "Running a Node Overview This page offers an introduction to all of the concepts and artifacts to consider when running and managing a node. After understanding the overall concepts, you can dive into detailed information about each topic. Here, it describes what an algorand node is, outlines the types of nodes in the algorand network, how a node is related to the consensus and its participation, details how they fit into Algorand’s Pure Proof-of-Stake (PPoS) consensus, alternatives for running your own node and the considerations for maintaining a secure, efficient and healthy node. Running an Algorand node is essential for participating in and maintaining the blockchain network. Whether you choose to run a relay node for network communication, a participation node for consensus voting, or an archival node for storing the complete ledger, your node plays a vital role in the network’s security and decentralization. This documentation provides a comprehensive guide to understanding and running Algorand nodes. A node is a computer, running the Algorand software (algod), that participates in the Algorand network playing a crucial role in maintaining the blockchain, by processing blocks, participating in the consensus protocol or storing data. There are two primary types of nodes in Algorand: Relay Nodes:Primarily facilitate communication by routing data to connected non-relay nodes. They interact with other relay nodes and distribute blocks to all linked non-relay nodes. Non-Relay Nodes:Connect exclusively to relay nodes and can participate in consensus. While non-relay nodes may establish connections with multiple relay nodes, they do not connect directly to other non-relay nodes. Also, depending on configuration, the nodes can be categorized as following: Consensus and Participation Algorand uses a unique consensus protocol called Pure Proof of Stake (PPoS) to achieve agreement on the blockchain, using a VRF (Verifiable Random Function) to randomly select leaders to propose blocks and committee members to vote on block proposals. This process is weighted based on the stake each account holds Algorand’s Pure Proof-of-Stake (PPoS) consensus relies on participation from online accounts. Nodes with valid participation keys can propose and vote on blocks- Managing participation keys and online/offline statuses is critical for ensuring network health and avoiding negative impacts on consensus thresholds. Why run an Algorand Node? Running a node on the Algorand network has several benefits that enhance the blockchain’s security, decentralization, and functionality. Below are the key points explaining why running a node is essential: Support Network Decentralization: Each node contributes to the decentralization and security of the Algorand network, making it more resistant to attacks and single points of failure. Nodes worldwide improve geographic diversity and network robustness. Participate in Consensus: By running a participation node, you can propose and vote on new blocks, directly contributing to the integrity of the blockchain. Algorand’s consensus protocol allows participation without locking or risking your Algo. Earn Staking Rewards: Your Algo tokens automatically earn rewards for participating in the consensus process, unlike systems that require explicit staking or delegation. Your tokens remain spendable at all times, providing flexibility without compromising on rewards. Refer toStaking Rewardsfor more details. Direct Access to Blockchain Data with Advanced Querying: Running a node provides direct access to the Algorand blockchain, enabling you to submit transactions, access real-time data. Additionally, running an archival node with an indexer enhances this capability by allowing advanced querying for specific transactions, accounts, or assets. Ease of Setup and Maintenance: Algorand nodes use an efficient sync mechanism that requires only minimal disk space (~6-10 GB) for non-archival nodes. Your node can be fully operational within minutes using the Fast Catchup feature. You can run an Algorand node (the algod software) using any of the following methods: Node management involves preparing your environment to run a stable, high-performance Algorand node and following best practices that keep the network healthy and ensure reliability and performance. At a minimum, you need a computer that meets the published requirements, robust power backup, and a reliable internet connection (possibly with redundancy); and following best practices (e.g., not running multiple nodes on the same machine, overloading a node with too many participation keys, or under-provisioning RAM and CPU). Proper node management also covers protocol updates, secure operating procedures, and, when needed, switching between networks."
  },
  {
    "url": "https://dev.algorand.co/getting-started/introduction#_top",
    "content": "Welcome to the new Algorand Developer Portal 👋 Whether you have been waiting for this or are surprised by it, please have a look around. We think you’re going to enjoy reading—or chatting with—these docs. In reimagining the Algorand Developer Portal, we set out to address challenges from the past, cater to what developers expect today, and plan for how technical documentation will be used in the future. Our work has been guided by a set of key principles: One-stop shop:The portal should consolidate all of the resources developers need to build with Algorand technologies. If something cannot be found, it may as well not exist. Therefore, the portal should colocate documentation and examples for all of our tools, libraries, and languages under a single site. In some cases, content is directly imported from external repositories; in other cases, we aim to include links to a rich array of external resources, from community-maintained SDKs to third-party learning materials. Correct and current:The content of the documentation needs to accurately reflect the current state of the art of Algorand code and tools. The old portal did not always include the latest libraries, abstractions, and paths-of-least-resistance that are available. Also, this site no longer showcases examples using old or deprecated languages and libraries. Rather, you will learn how to apply various concepts using the latest versions of AlgoKit libraries, which we believe to be the happiest path for developers to follow. Diátaxisframework:These docs have been designed loosely following the Diátaxis approach to technical documentation, which conceptualizes content along the axes of action vs. cognition and acquisition vs. application. The four quadrants which emerge from a plot of these axes are: First-class AI support:Artificial intelligence tools such as Large Language Models (LLMs) have recently and swiftly revolutionized how many software developers work. This site embraces AI workflows in two key ways: How to Use This Portal The portal is organized into the following sections: Want to get your hands on Algorand code as quickly as possible? This section is for you. Install AlgoKit and deploy your first smart contract, follow a guided code tutorial in your browser, or browse a gallery of examples to see what Algorand apps look like in practice, all in just minutes. Developing software for blockchain requires understanding and applying a different programming paradigm than one might be accustomed to in other types of systems. Use this section as a way to build your mental model of Algorand and how the distributed ledger’s accounts, transactions, assets, smart contracts, and the consensus protocol work, both on their own and as a complex, composable system. Throughout this section, you will find concrete examples of how to apply these concepts in practice using the most current libraries, languages, and tools. AlgoKit is a collection of developer tools to make it easy to build, test, and deploy applications on Algorand, and this section contains the user manuals for the tools in the kit. This section documents each of these tools, from the CLI to Lora to the smart contract languages and other code libraries. Discover how to set up an Algorand node of various types in this section. Follow the NodeKit Quick Start to use Algorand Foundations’ terminal user interface to install and manage your node. You can also find documentation on Indexer and Conduit, node management practices, and how to configure the node software in various ways. This section of the site imports API reference documentation for a number of tools, languages, libraries, and more. Additionally, the ARC Standards section contains information about our Algorand Request for Comments (ARC) standards that guide the developer ecosystem to apply Algorand technical capabilities in consistent and interoperable ways. If you’re reading this portal, then the portal is for you. Whether you are actively building applications on Algorand, performing formal research, or just following your curiosity, we appreciate your feedback. All our docs are open source under the Algorand Foundation organization on GitHub, and you are welcome to submit documentation feedback, bug reports, or other issues using the GitHub Issues templateshere. This site is built using theStarlightdocumentation theme forAstro, an industry-leading static site generation framework. The integrated AI bot is provided bykapa.ai."
  },
  {
    "url": "https://dev.algorand.co/getting-started/algokit-quick-start#_top",
    "content": "Getting Started with AlgoKit Hello, Developer! Welcome to Algorand! This quick start guide will help you set up your development environment, create your first Algorand project with AlgoKit, and deploy your first Algorand smart contract. By the end of this guide, you’ll be ready to build your own decentralized application on the Algorand blockchain. But first, what is AlgoKit? AlgoKit is a simple, one-stop tool for developers to quickly and easily build and launch secure, automated, production-ready decentralized applications on the Algorand protocol — now also featuring native support for Python! This empowers developers to write Algorand apps in regular Python, one of the world’s most popular programming languages. In addition, AlgoKit features: Learn more about AlgoKit Here: Before you install AlgoKit, you need to install the following prerequisites: To install AlgoKit, run the following command from a terminal. If you used AlgoKit before, update it with pipx: After the installation completes,restart the terminal. Ensure prerequisites are installed Install Python3 using WinGet Restart the terminal to ensure Python and pip are available on the path Restart the terminal to ensure pipx is available on the path Install AlgoKit via pipx: If you used AlgoKit before, update it with pipx: Restart the terminal to ensure AlgoKit is available on the path Ensure prerequisites are installed Install using Homebrew Restart the terminal to ensure AlgoKit is available on the path Ensure prerequisites are installed Install AlgoKit, withpipxby running the following command from a terminal. If you used AlgoKit before, update it with pipx: After the installation completes,restart the terminal. Verify the Installation To verify AlgoKit Installed correctly run the following command: Output similar to the following should be displayed: When building smart contracts, it is recommended to build and test on a local Algorand blockchain running on your computer first. Deploying and calling smart contracts on mainnet (the live public blockchain for production) costs real money. Deploying on testnet (a replica of mainnet for testing) can be cumbersome. Therefore, it is recommended to first test on the local blockchain. Once everything works, move to testnet for final testing, and then deploy to mainnet to launch your application. AlgoKit supports using alocal version of the Algorand blockchain. To start an instance of this LocalNet first openDocker Desktopon your computer and then run the following command from the terminal: This should start an instance of the LocalNet within docker. If you open the Docker Desktop application you should something similar to the following: Create an AlgoKit project Now, let’s create an Algorand project with AlgoKit. We will refer to these projects as “AlgoKit projects.” AlgoKit provides a series of templates for you to use depending on the type of project you want to create. This guide will walk you through using either theTypeScriptorPythonsmart contract starter template. Choose the language that you are most comfortable with. For this guide, we will use the TypeScript smart contract starter template. To create a new AlgoKit project you can easily do so by running: This will launch a guided menu system to create a specific project tailored to your needs. You will first be prompted to select the type of project you want to create. For this quick start guide, we will use the TypeScript smart contract template, so select theSmart Contractsoption. Next, AlgoKit will ask you what programming language you want to use for the smart contract. With AlgoKit 3.0, you can now write Algorand smart contracts with native TypeScript. Let’s selectTypeScriptas our smart contract language by pressing enter. Then AlgoKit will ask you for the name of the project. Let’s name ithello-algorand, but if you want to name it differently, feel free to do so! After writing the name, press enter to continue. Next you can set the name of the smart contract. We will keep it as it is for now. Next, you can select the template preset. TheStarterpreset is for quickly implementing and testing certain features whereas theProductionpreset is for production-ready applications. For this guide, let’s selectStarter. Next, AlgoKit will ask you if you want to run thealgokit project bootstrapcommand to install the necessary dependencies. Say yes by pressing “y” This process can take a few minutes. Finally, AlgoKit will ask you if you want to initialize a git repository. Let’s say yes by pressing “y” so that we can easily push our AlgoKit project to Github. Once finished, VS Code should automatically be opened with the initialized project if VS Code is set as your default editor. If not,cdinto the project directory and open the project in your IDE of choice. This starter app contains one smart contract written inAlgorand TypeScriptnamedHelloWorldin thesmart_contracts/hello_world/contract.algo.tsfile. The contract has a method calledhellothat takes in aStringand returns aString. For this guide, we will use the Python smart contract starter template. To create a new AlgoKit project you can easily do so by running: This will launch a guided menu system to create a specific project tailored to your needs. You will first be prompted to select the type of project you want to create. For this quick start guide, we will use the Python smart contract template, so select theSmart Contractsoption. Next, AlgoKit will ask you what programming language you want to use for the smart contract. With AlgoKit 2.0, you can now write Algorand smart contracts with native Python. Let’s selectPythonas our smart contract language by pressing enter. Then AlgoKit will ask you for the name of the project. Let’s name ithello-algorand, but if you want to name it differently, feel free to do so! After writing the name, press enter to continue. Next you can set the name of the smart contract. We will keep it as it is for now. Next, you can select the template preset. TheStarterpreset is for quickly implementing and testing certain features whereas theProductionpreset is for production-ready applications. For this guide, let’s selectStarter. Next, AlgoKit will ask you what language you want to use for contract deployment. After writing your smart contract you need to deploy and call the contract either from your frontend or backend. Since most frontend frameworks are in Python, let’s select Python for this guide. Next, AlgoKit will ask you if you want to run thealgokit project bootstrapcommand to install the necessary dependencies. Say yes by pressing “y” This process can take a few minutes. Finally, AlgoKit will ask you if you want to initialize a git repository. Let’s say yes by pressing “y” so that we can easily push our AlgoKit project to Github. Once finished, VS Code should automatically be opened with the initialized project if VS Code is set as your default editor. If not,cdinto the project directory and open the project in your IDE of choice. This starter app contains one smart contract written inAlgorand PythonnamedHelloWorldin thesmart_contracts/hello_world/contract.pyfile. The contract has a method calledhellothat takes in aStringand returns aString. Run the Demo Application Once the starter project is created, you will notice in thesmart_contracts/hello_worldfolder a file nameddeploy_config.tswhich is a simple example of using AlgoKit to deploy theHelloWorldsmart contract incontract.algo.tson the Local Algorand blockchain started earlier and then call thehellomethod. Now there are two ways to run thedeploy-config.tsfile to deploy and call the smart contract: By hittingF5it will start LocalNet, build the smart contract, deploy and call the smart contractcontract.algo.tsby running thedeploy-config.tsfile. Alternatively, you can run the following commands from the terminal to build the contract and run thedeploy-config.tsfile: The output should look similar to the following: The App ID of of the deployed contract and its Algorand address is displayed, followed by the message returned from the smart contract call. Additionally, by building the smart contract, AlgoKit generates various artifacts in theartifactsfolder. These artifacts include: These artifacts can be used by tools likeLoraandgoalto deploy your smart contract to various Algorand networks. Once the starter project is created, you will notice in thesmart_contracts/hello_worldfolder a file nameddeploy_config.pywhich is a simple example of using AlgoKit to deploy theHelloWorldsmart contract incontract.pyon the Local Algorand blockchain started earlier and then call thehellomethod. Now there are two ways to run thedeploy-config.pyfile to deploy and call the smart contract: By hittingF5it will start LocalNet, build the smart contract, deploy and call the smart contractcontract.pyby running thedeploy-config.pyfile. Alternatively, you can run the following commands from the terminal to build the contract and run thedeploy-config.pyfile: The output should look similar to the following: The App ID of of the deployed contract is displayed, followed by the message returned from the smart contract call. Additionally, by building the smart contract, AlgoKit generates various artifacts in theartifactsfolder. These artifacts include: These artifacts can be used by tools likeLoraandgoalto deploy your smart contract to various Algorand networks. Lora is a web-based user interface that let’s you visualize accounts, transactions, assets and applications on an Algorand network and also provides ability to deploy and call smart contracts. This works for TestNet, MainNet and also LocalNet. While AlgoKit surfaces both a programming interface and a command line interface for interacting with Algorand, it also allows you to quickly open Lora so you can see what’s happening visually. Lora can be launched from AlgoKit by running the following command from the terminal. By default it will open Lora and point to LocalNet (It will be displayed asLocalNetin the upper right hand corner), but you can pass in parameters to point it to TestNet and MainNet too. This command will launch your default web browser and load the Lora web application. Create / Connect local account for testing To issue commands against the LocalNet network you need an account with ALGO in it. Lora gives you three options for connecting to a local wallet:Connect KMD,Connect MNEMONIC, andConnect Lute Connect KMD: Lora will automatically import KMD wallet. Connect MNEMONIC: You can manually input a MNEMONIC for an account you own. Connect Lute: You can create local accounts fromLuteand connect to them. In this guide, we will use the KMD wallet. SelectConnect walletlocated at top right hand side of the webpage and you will be prompted with the three wallet choices. Choose theConnect KMDoption. This will prompt you to enter the KMD password. If this is your first time building on Algorand, you do not have a KMD password so leave it blank and clickOK. This will connect the KMD account to Lora so you can use that account for signing transactions from the Lora user interface. Deploy the Hello World application To deploy your smart contract application, select theApp Labmenu and click on theCreatebutton. ClickDeploy newandSelect an ARC-32 JSON app spec fileto browse to the artifacts created in the previous section of this guide. Select theHelloWorld.arc32.jsonmanifest file. This will load the specific manifest file for the Hello World sample application. ClickNext. You can change theNameand theVersionof your app. We will keep it as it is. ClickNext. Click the() Callbutton. Then build and add the create transaction by clickingAdd. ClickDeployand sign the transaction by clickingOKin the KMD pop up to deploy the smart contract to the local Algorand network. You should now see the deployedHelloWorldcontract on theApp Labpage. Now click on theApp IDinside of theHelloWorldcard to go to theApplicationpage. Inside theABI Methodssection, you should see thehellomethod. Click on the drop down and theCallbutton. You will be prompted with a popup allowing you to enter the parameter for thehellomethod and call it. Enter a string in thevalueinput and click onAdd. You should now see the transaction you just built on theApplicationpage. ClickSendand sign the transaction with your KMD wallet to execute the transaction. You should now see theSend Resultshowing you the details about the transaction you just executed! You can also click onTransaction IDto go to theTransactionpage and see the full detail of the transaction. You have now successfully deployed and executed a smart contract method call using Lora! Congratulations and great job completing this guide! If you have followed this guide, you now have deployed a simple contract to an Algorand network and called it successfully! You are now ready to start building your own decentralized applications on the Algorand blockchain. Learn about general Algorand concepts: Learn more about AlgoKit:"
  },
  {
    "url": "https://dev.algorand.co/algokit/algokit-intro",
    "content": "AlgoKit is a comprehensive software development kit designed to streamline and accelerate the process of building decentralized applications on the Algorand blockchain. At its core, AlgoKit features a powerful command-line interface (CLI) tool that provides developers with an array of functionalities to simplify blockchain development. Along with the CLI, AlgoKit offers a suite of libraries, templates, and tools that facilitate rapid prototyping and deployment of secure, scalable, and efficient applications. Whether you’re a seasoned blockchain developer or new to the ecosystem, AlgoKit offers everything you need to harness the full potential of Algorand’s impressive tech and innovative consensus algorithm. AlgoKit CLI is a powerful set of command line tools for Algorand developers. Its goal is to help developers build and launch secure, automated, production-ready applications rapidly. Here is the list of commands that you can use with AlgoKit CLI. To learn more about AlgoKit CLI, refer to the following resources: If you are a Python developer, you no longer need to learn a complex smart contract language to write smart contracts. Algorand Python is a semantically and syntactically compatible, typed Python language that works with standard Python tooling and allows you to write Algorand smart contracts (apps) and logic signatures in Python. Since the code runs on the Algorand virtual machine(AVM), there are limitations and minor differences in behaviors from standard Python, but all code you write with Algorand Python is Python code. Here is an example of a simple Hello World smart contract written in Algorand Python: To learn more about Algorand Python, refer to the following resources: If you are a TypeScript developer, you no longer need to learn a complex smart contract language to write smart contracts. Algorand TypeScript is a semantically and syntactically compatible, typed TypeScript language that works with standard TypeScript tooling and allows you to write Algorand smart contracts (apps) and logic signatures in TypeScript. Since the code runs on the Algorand virtual machine(AVM), there are limitations and minor differences in behaviors from standard TypeScript, but all code you write with Algorand TypeScript is TypeScript code. Here is an example of a simple Hello World smart contract written in Algorand TypeScript: To learn more about Algorand TypeScript, refer to the following resources: AlgoKit Utils is a utility library recommended for you to use for all chain interactions like sending transactions, creating tokens(ASAs), calling smart contracts, and reading blockchain records. The goal of this library is to provide intuitive, productive utility functions that make it easier, quicker, and safer to build applications on Algorand. Largely, these functions wrap the underlying Algorand SDK but provide a higher-level interface with sensible defaults and capabilities for common tasks. AlgoKit Utils is available in TypeScript and Python. The library helps you interact with and develop against the Algorand blockchain with a series of end-to-end capabilities as described below: To learn more about AlgoKit Utils, refer to the following resources: The AlgoKit LocalNet feature allows you to manage (start, stop, reset, manage) a locally sandboxed private Algorand network. This allows you to interact with and deploy changes against your own Algorand network without needing to worry about funding TestNet accounts, whether the information you submit is publicly visible, or whether you are connected to an active Internet connection (once the network has been started). AlgoKit LocalNet uses Docker images optimized for a great developer experience. This means the Docker images are small and start fast. It also means that features suited to developers are enabled, such as KMD (so you can programmatically get faucet private keys). To learn more about AlgoKit Localnet, refer to the following resources: The AlgoKit AVM VS Code debugger extension provides a convenient way to debug any Algorand Smart Contracts written in TEAL. To learn more about the AVM debugger, refer to the following resources: The client generator generates a type-safe smart contract client for the Algorand Blockchain that wraps the application client in AlgoKit Utils and tailors it to a specific smart contract. It does this by reading an ARC-0032 application spec file and generating a client that exposes methods for each ABI method in the target smart contract, along with helpers to create, update, and delete the application. To learn more about the client generator, refer to the following resources: The AlgoKit TestNet Dispenser API provides functionalities to interact with the Dispenser service. This service enables users to fund and refund assets. To learn more about the testnet dispenser, refer to the following resources: AlgoKit Tools and Versions While AlgoKit as acollectionwas bumped to Version 3.0 on March 26, 2025, it is important to note that the individual tools in the kit are on different package version numbers. In the future this may be changed to epoch versioning so that it is clear that all packages are part of the same epoch release."
  }
]